import SistemasInoperativos.*

describe "Tests inoperativos" {
	
	var solitario = new Aplicacion (100, 1)
	var notepad = new Aplicacion (200, 2)
	var appGrande = new Aplicacion (3000, 3)
	var appPesada = new Aplicacion (100, 4)
	var guin10 = new GuinDOS(500, 5, 10.0, [solitario])
	var mate = new Distribucion(80, [notepad, solitario,appPesada])
	var ubuntu = new Distribucion(128, [])
	var pinguin = new PinguinOS(500,5, mate)
	var equipo = new Equipo (1000, 10)
	var equipoChico = new Equipo (100, 10)
	
	
	// Instalacion SI
	test "instalar un SI en un equipo " {
		equipo.instalarSI(guin10)
		assert.equals(guin10, equipo.si())
	}
	test "instalar un SI en un equipo, ocupa disco " {
		equipo.instalarSI(guin10) // 500 + 100
		assert.equals(400, equipo.discoLibre())
	}
	test "instalar un SI en un equipo chico, da una excepcion" {
		assert.throwsExceptionLike(sinLugarEnDisco, {equipoChico.instalarSI(guin10)})
	}

	// Instalacion Apps
	test "se puede instalar una App comun "{
		equipo.instalarSI(guin10)
		assert.that(equipo.puedeInstalarApp(notepad))
	}
	test "no se puede instalar una App sin SI"{
		assert.notThat(equipo.puedeInstalarApp(notepad))
	}
	test "no se puede instalar una App grande"{
		equipo.instalarSI(guin10)
		assert.notThat(equipo.puedeInstalarApp(appGrande))
	}
	test "no se puede instalar una App ya instalada"{
		equipo.instalarSI(guin10)
		equipo.instalarApp(notepad)
		assert.notThat(equipo.puedeInstalarApp(notepad))
	}

	test "se instala una App comun y ocupa disco"{
		equipo.instalarSI(guin10) // 500 + 100
		equipo.instalarApp(notepad) // 200
		assert.equals(200, equipo.discoLibre())
	}
	
	// Ejecutar apps
	test "ejecutar una App comun, utiliza memoria "{
		equipo.instalarSI(guin10) // 5
		equipo.ejecutar(solitario) // 1
		assert.equals(10-(5+1),equipo.memoriaLibre())
		}
	test "ejecutar una App en ejecucion, lanza excepcion "{
		equipo.instalarSI(guin10)
		equipo.ejecutar(solitario)
		assert.throwsExceptionLike(noPuedeEjecutarseAplicacionEnEjecucion ,{equipo.ejecutar(solitario)})
		}
	test "ejecutar una App no instalada, lanza excepcion "{
		equipo.instalarSI(guin10)
		assert.throwsExceptionLike(noPuedeEjecutarseAplicacionNoInstalada ,{equipo.ejecutar(notepad)})
		}
	test "ejecutar dos Apps con memoria disponible en guin"{
		equipo.instalarSI(guin10)
		equipo.instalarApp(notepad) 
		equipo.ejecutar(solitario)
		equipo.ejecutar(notepad)
		assert.equals(2,equipo.cantAppsEnEjecucion())
		}
	test "ejecutar una App sin memoria disponible en guin, se cancelan las anteriores"{
		equipo.instalarSI(guin10)
		equipo.instalarApp(notepad) 
		equipo.instalarApp(appPesada) 
		equipo.ejecutar(solitario)
		equipo.ejecutar(notepad)
		equipo.ejecutar(appPesada)
		assert.equals(1,equipo.cantAppsEnEjecucion())
		assert.notThat(equipo.laAppEstaEjecutandose(solitario))
		assert.notThat(equipo.laAppEstaEjecutandose(notepad))
		assert.that(equipo.laAppEstaEjecutandose(appPesada))
		}
	test "ejecutar una App sin memoria disponible en familia unix,se ignora"{
		equipo.instalarSI(pinguin) //viene con las 3 apps instaladas
		equipo.ejecutar(solitario) // 1
		equipo.ejecutar(notepad)   // 2 
		equipo.ejecutar(appPesada) // 4
		assert.equals(2,equipo.cantAppsEnEjecucion())
		assert.that(equipo.laAppEstaEjecutandose(solitario))
		assert.that(equipo.laAppEstaEjecutandose(notepad))
		assert.notThat(equipo.laAppEstaEjecutandose(appPesada))
		
		}
	test "Equipo explotado con varias applicaciones"{
		equipo.instalarSI(guin10)
		equipo.instalarApp(appPesada) 
		equipo.ejecutar(appPesada)
		assert.that(equipo.estaExplotado())
		}
	test "corriendoLaPeor"{
		equipo.instalarSI(guin10)   // con notepad (1)
		equipo.instalarApp(notepad) // 2
		equipo.ejecutar(notepad)
		assert.that(equipo.corriendoLaPeor())
	}

}